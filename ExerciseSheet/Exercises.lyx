#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{26th Sept. 2013}
\author{Patrick Jayet \and Oliver Gepp \and Sascha Thoeni}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Objective-C & iOS Workshop
\end_layout

\begin_layout Section
Stack
\end_layout

\begin_layout Subsection
Create a New Project
\end_layout

\begin_layout Paragraph*
Goal: TBD
\end_layout

\begin_layout Paragraph
TBD
\end_layout

\begin_layout Subsection
Implement a Stack
\end_layout

\begin_layout Paragraph*
Goal: TBD
\end_layout

\begin_layout Paragraph
TBD
\end_layout

\begin_layout Section
UI
\end_layout

\begin_layout Subsection
Linking Interface Items
\end_layout

\begin_layout Standard

\series bold
Goal
\series default
: in this exercise, we will see how to link items defined in the Interface
 Builder – classes, outlets and event methods – with the corresponding elements
 in the code.
\end_layout

\begin_layout Enumerate
Open the skeleton project RpnCalcPart2.
 The setup of the project comprises:
\end_layout

\begin_deeper
\begin_layout Itemize
The model: a Stack and Computer model classes.
\end_layout

\begin_layout Itemize
A storyboard file where the UI of the app is defined.
 
\end_layout

\begin_layout Itemize
Various less important files.
\end_layout

\end_deeper
\begin_layout Enumerate
Create a class CalcViewController, which should subclass UIViewController
\end_layout

\begin_deeper
\begin_layout Itemize
As seen in the exercise 1.
\end_layout

\begin_layout Itemize
The new class 'CalcViewController' should be a subclass of 'UIViewController'.
\end_layout

\begin_layout Itemize
We have know an empty view controller where some default methods are already
 implemented
\end_layout

\end_deeper
\begin_layout Enumerate
Link the controller class in the Interface Builder with the newly created
 controller class in the code
\end_layout

\begin_deeper
\begin_layout Itemize
In the Project Navigator, click on the file 'Main.storyboard'.
 The Interface Builder is shown with the interface file.
\end_layout

\begin_layout Itemize
On the left side of the Interface Builder, in the view hierarchy tree, click
 on the the file 'View Controller' (see screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Screenshot-of-IB"

\end_inset

)
\end_layout

\begin_layout Itemize
On the right side select the Identity Inspector (see screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Screenshot-of-IB"

\end_inset

)
\end_layout

\begin_layout Itemize
Under 'Custom Class', type the name of the newly created controller class
 'CalcViewController'.
\end_layout

\begin_layout Itemize
The link between the class in the code and in IB is done.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/IB-Identity-Inspector-crop.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Screenshot of IB showing the Identity Inspector and Custom Class field.
\begin_inset CommandInset label
LatexCommand label
name "fig:Screenshot-of-IB"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Define an outlet for the result text view
\end_layout

\begin_deeper
\begin_layout Itemize
In the 'CalcViewController' (i.e.
 in the header .h), add the following property between '@interface' and '@end':
 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

@property (strong) IBOutlet UITextView* resultView;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The prefix 'IBOutlet' does nothing in the code, except to indicate to IB
 that this property will be used as an UI item outlet.
\end_layout

\begin_layout Itemize
Go to IB (select 'Main.storyboard').
\end_layout

\begin_layout Itemize
Right click on 'Calc View Controller' in the left side, a dark gray panel
 appears, where we see the name of our result property 'resultView' (see
 screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:connecting-an-outlet"

\end_inset

)
\end_layout

\begin_layout Itemize
Drag-click from the circle at the right of 'resultView' to the element 'UITextVi
ew' on the right (see screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:connecting-an-outlet"

\end_inset

).
\end_layout

\begin_layout Itemize
Now the connection is done between the property in the code and the UI element
 in IB.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/IB-define-outlet.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Connecting a view from IB with an outlet in the code.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:connecting-an-outlet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In 'CalcViewController', define UI callback methods.
\end_layout

\begin_deeper
\begin_layout Itemize
In order to get events in the code when we press on the calculator keys,
 we do the connection with the desired events in IB.
\end_layout

\begin_layout Itemize
First define in the controller three callback methods:
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Description

- (IBAction)digitPressed:(id)sender {
\end_layout

\begin_layout Description

    UIButton* button = sender;
\end_layout

\begin_layout Description

    NSString* digit = button.currentTitle;
\end_layout

\begin_layout Description

    NSLog(@"Digit pressed %@", digit);
\end_layout

\begin_layout Description

    // further implementation 
\end_layout

\begin_layout Description

}
\end_layout

\begin_layout Description

- (IBAction)operationPressed:(id)sender {
\end_layout

\begin_layout Description

    UIButton* button = sender;
\end_layout

\begin_layout Description

    NSString* operation = button.currentTitle;
\end_layout

\begin_layout Description

    NSLog(@"Operation pressed %@", operation);
\end_layout

\begin_layout Description

    // further implementation
\end_layout

\begin_layout Description

}
\end_layout

\begin_layout Description

- (IBAction)enterPressed:(id)sender {
\end_layout

\begin_layout Description

    NSLog(@"Enter pressed");
\end_layout

\begin_layout Description

    // further implementation
\end_layout

\begin_layout Description

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Similarly to the outlet definition, the 'IBAction' keyword does nothing
 in the code – it is a synonym to 'void' – except to indicate to IB that
 the corresponding methods are going to receive IB events.
 The 'sender' parameter is always the view where the event comes from –
 in this case an UIButton.
\end_layout

\begin_layout Itemize
Go to the IB, right click on a digit button, connect the event 'Touch Up
 Inside' with the controller 'Calc View Controller' on the left and select
 the method 'digitPressed:'.
 You have now connected one button.
 Do the same for the other digit buttons (to the same method).
\end_layout

\begin_layout Itemize
Now connect all four operator keys '+', '-', '*' and '/' to the method 'operatio
nPressed:'.
 Here again the event 'Touch Up Inside'.
\end_layout

\begin_layout Itemize
Finally connect the enter key to the method 'enterPressed:'.
\end_layout

\end_deeper
\begin_layout Enumerate
Now you can start the simulator (the play button on the top left of Xcode).
 You should see the calculator popping up.
 When you press on a key, you should see in the console the message of the
 corresponding callback method.
\end_layout

\begin_layout Subsection
Linking the Business Logic
\end_layout

\begin_layout Standard

\series bold
Goal
\series default
: in this exercise, we will see how to call the business logic and refresh
 the UI from the callback methods in the controller.
\end_layout

\begin_layout Enumerate
In the controller (the .m file) define and initialize a private property
\end_layout

\begin_deeper
\begin_layout Itemize
According to the following snippet – should be before the '@implementation'
 block.
 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

@interface CalcViewController ()
\end_layout

\begin_layout Plain Layout

@property (readwrite) Computer* computer;
\end_layout

\begin_layout Plain Layout

@end
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Remember to import 
\begin_inset Quotes eld
\end_inset

Computer.h
\begin_inset Quotes erd
\end_inset

 at the top of the file, for the type 'Computer' to be visible.
\end_layout

\begin_layout Itemize
In the method 'viewDidLoad', initialize the property.
 A property should always be accessed using the dot notation, e.g.
 'self.foo'.
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

self.computer = [[Computer alloc] init];
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In the controller (the .m file), define a method to update the UI
\end_layout

\begin_deeper
\begin_layout Itemize
Use the following snippet
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

- (void)updateUI
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    // code here
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Complete the missing part.
 The method should:
\end_layout

\begin_deeper
\begin_layout Itemize
Read the resulting text from the computer object.
\end_layout

\begin_layout Itemize
Set the text content of the resultView – have a look at the text property
 of UITextView.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Call 'updateUI' from the end of 'viewDidLoad'.
\end_layout

\begin_layout Enumerate
Now complete the three callback methods 'digitPressed:', 'operationPressed:'
 and 'enterPressed:'.
\end_layout

\begin_deeper
\begin_layout Itemize
Each method should do the following:
\end_layout

\begin_deeper
\begin_layout Itemize
Call the corresponding method on the 'computer' property.
\end_layout

\begin_layout Itemize
Call the method to update the UI.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
That's it.
 Everything should be in place now.
 Build and run the project.
 The calculator should work correctly.
\end_layout

\begin_deeper
\begin_layout Itemize
Hint: this is a calculator which works in RPN mode – reverse polnish notation.
 To compute '1 + 2' you need the following steps:
\end_layout

\begin_deeper
\begin_layout Itemize
Press '1'
\end_layout

\begin_layout Itemize
Press 'Enter'
\end_layout

\begin_layout Itemize
Press '2'
\end_layout

\begin_layout Itemize
Press '+'
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
API from an External Framework & Gesture Recognizer
\end_layout

\begin_layout Subsection
Say it!
\end_layout

\begin_layout Standard

\series bold
Goal
\series default
: In this Exercise we will teach our calculator to speak the result.
 For this we will update the UI and use an external framework for the speech
 synthesis.
\end_layout

\begin_layout Enumerate
Open the storyboard (Main.storyboard) and click the empty button in the lower
 row.
\end_layout

\begin_layout Enumerate
In Attribute Inspector locate the entry “Image” and set its value to loudspeaker
 by using the dropdown.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/CustomizePlayButton.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Customizing the play button
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Switch to Assistant editor perspective an make sure you see the storyboard
 on the left and your CalcViewController.m file on the right.
 Drag a line from the loudspeaker button to an empty space in the m-file
 by dragging ctrl.
 
\end_layout

\begin_layout Enumerate
In the popup define the method name “loudSpeakerPressed”.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/IBAction.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Defining an IBAction with Interface Builder
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Import the AVFoundation framework by selecting your project root in the
 Project Navigator.
 Scroll to the section 'Linked Framework and Libraries' and hit the '+ button'.
 From the list select 'AVFoundation.framework'.
 Navigate to your CalcViewController.m file and add import 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

#import <AVFoundation/AVFoundation.h>
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Add these lines of code to the loudSpekerPressed method: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

AVSpeechUtterance *utterance = [AVSpeechUtterance speechUtteranceWithString:@”He
llo World”]; 
\end_layout

\begin_layout Plain Layout

AVSpeechSynthesizer *synthesizer = [AVSpeechsynthesizer alloc] init]; 
\end_layout

\begin_layout Plain Layout

[synthesizer speakUtterance:utterance]; 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Modify the code so that the calculator result is played.
 
\end_layout

\begin_layout Enumerate
Optional: Optimize your code so that utterance and synthesizer is only instantia
ted once.
 
\end_layout

\begin_layout Enumerate
Optional: Play around with the options of AVSpeechUtterance.
 How about using a different language or rate? Tip: Have a look in the documenta
tion (Alt+Click on class name).
\end_layout

\begin_layout Subsection
Shake it!
\end_layout

\begin_layout Standard

\series bold
Goal
\series default
: In this exercise we will reset our calculator by shaking the device.
\end_layout

\begin_layout Enumerate
Open class CalcViewController.m and add these lines of code:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

-(void) motionBegann:(UIEventSubtype*) motion withEvent:(UIEvent*)event{
\end_layout

\begin_layout Plain Layout

	if(event.type == UIEventSubtypeMotionShake){
\end_layout

\begin_layout Plain Layout

		NSLog(@”Shake it!”);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Test your code in the simulator.
 Simulator can emulate a shake event from the 'Hardware' menu.
\end_layout

\begin_layout Enumerate
Modify your method to reset the model and display the result in the calculator
 display.
 Tip: You need to modify the classes ViewController.m, Computer.h, Computer.m,
 Stack.h and Stack.m.
 Use the method 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

–(void) removeAllObjects;
\end_layout

\end_inset

 on NSMutableArray to reset the stack.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Optional: Play around with your calculator.
 Be creative – how about a calculator that speaks every number that is pressed?
\end_layout

\end_body
\end_document
