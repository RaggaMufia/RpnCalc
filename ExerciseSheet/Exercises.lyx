#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{26th Sept. 2013}
\author{Patrick Jayet \and Oliver Gepp \and Sascha Thoeni}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Objective-C & iOS Workshop
\end_layout

\begin_layout Section
Stack
\end_layout

\begin_layout Paragraph*
Goal: TBD
\end_layout

\begin_layout Paragraph
TBD
\end_layout

\begin_layout Section
UI
\end_layout

\begin_layout Subsection*
Link Interface Items
\end_layout

\begin_layout Standard
Goal: in this exercise, we will see how to link items defined in the Interface
 Builder – classes, outlets and event methods – with the corresponding elements
 in the code.
\end_layout

\begin_layout Enumerate
Open the skeleton project RpnCalcPart2.
 The setup of the project comprises:
\end_layout

\begin_deeper
\begin_layout Itemize
The model: a Stack class and a skeleton of a Computer class.
\end_layout

\begin_layout Itemize
A storyboard file where the UI of the app is defined.
 
\end_layout

\begin_layout Itemize
A UnitTest class which verifies that the Stack and Computer methods are
 working properly.
\end_layout

\end_deeper
\begin_layout Enumerate
Create a class CalcViewController, which should subclass UIViewController
\end_layout

\begin_deeper
\begin_layout Itemize
In the Project Navigator, right mouse button (e.g.
 on the controller folder) then select 'New File...'
\end_layout

\begin_layout Itemize
On the next screen, choose the template 'Objective-C class' and then 'Next'
\end_layout

\begin_layout Itemize
Type the name of the class 'CalcViewController' and the name of the base
 class 'UIViewController', then 'Next'.
\end_layout

\begin_layout Itemize
Select the folder where to save the new class (just 'RpnCalc') and then
 'Create'
\end_layout

\begin_layout Itemize
We have know an empty view controller where some default methods are already
 implemented
\end_layout

\end_deeper
\begin_layout Enumerate
Link the controller class in the Interface Builder with the newly created
 controller class in the code
\end_layout

\begin_deeper
\begin_layout Itemize
In the Project Navigator, click on the file 'Main.storyboard'.
 The Interface Builder is shown with the interface file.
\end_layout

\begin_layout Itemize
On the left side of the Interface Builder, in the view hierarchy tree, click
 on the the file 'View Controller' (see screenshot of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Screenshot-of-IB"

\end_inset

)
\end_layout

\begin_layout Itemize
On the right side select the Identity Inspector (see screenshot of figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Screenshot-of-IB"

\end_inset

)
\end_layout

\begin_layout Itemize
Under 'Custom Class', type the name of the newly created controller class
 'CalcViewController'.
\end_layout

\begin_layout Itemize
The link between the class in the code and in IB is done.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/IB-Identity-Inspector.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Screenshot of IB showing the Identity Inspector and Custom Class field.
\begin_inset CommandInset label
LatexCommand label
name "fig:Screenshot-of-IB"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Define an outlet for the result text view
\end_layout

\begin_deeper
\begin_layout Itemize
In the CalcViewController (i.e.
 in the header .h), add the following property between '@interface' and '@end':
 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout

@property (strong) IBOutlet UITextView* resultView;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The prefix 'IBOutlet' does nothing in the code, except to indicate to IB
 that this property will be used as an outlet to an item in IB.
\end_layout

\begin_layout Itemize
Go to IB (select 'Main.storyboard')
\end_layout

\begin_layout Itemize
Right click on 'Calc View Controller' in the left side, a dark gray panel
 appears, where we see the name of our result property 'resultView' (see
 screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:connecting-an-outlet"

\end_inset

)
\end_layout

\begin_layout Itemize
Drag-click from the circle at the right of 'resultView' to the element 'UITextVi
ew' on the right (see screenshot 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:connecting-an-outlet"

\end_inset

).
\end_layout

\begin_layout Itemize
Now the connection is done between the property in the code and the UI element
 in IB.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/IB-define-outlet.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Connecting a view from IB with an outlet in the code.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:connecting-an-outlet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In CalcViewController, define methods to get the events when we press on
 a button.
\end_layout

\begin_deeper
\begin_layout Itemize
In order to get events in the code when we press on the calculator keys,
 we do the connection with the IB.
\end_layout

\begin_layout Itemize
First define in the controller three methods to get the events from the
 digit, operation and enter keys.
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Description

- (IBAction)digitPressed:(id)sender {
\end_layout

\begin_layout Description

    UIButton* button = sender;
\end_layout

\begin_layout Description

    NSString* digit = button.currentTitle;
\end_layout

\begin_layout Description

    NSLog(@"Digit pressed %@", digit);
\end_layout

\begin_layout Description

    // further implementation 
\end_layout

\begin_layout Description

}
\end_layout

\begin_layout Description

- (IBAction)operationPressed:(id)sender {
\end_layout

\begin_layout Description

    UIButton* button = sender;
\end_layout

\begin_layout Description

    NSString* operation = button.currentTitle;
\end_layout

\begin_layout Description

    NSLog(@"Operation pressed %@", operation);
\end_layout

\begin_layout Description

    // further implementation
\end_layout

\begin_layout Description

}
\end_layout

\begin_layout Description

- (IBAction)enterPressed:(id)sender {
\end_layout

\begin_layout Description

    NSLog(@"Enter pressed");
\end_layout

\begin_layout Description

    // further implementation
\end_layout

\begin_layout Description

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Similarly to the outlet definition, the 'IBAction' keyword does nothing
 in the code – it is a synonym to 'void' – excepted to indicate to IB that
 the corresponding methods are going to receive IB events.
 The 'sender' parameter is always the view where the event comes from –
 in this case an UIButton.
\end_layout

\begin_layout Itemize
Go to the IB, right click on a digit button, connect the event 'Touch Up
 Inside' with the controller 'Calc View Controller' on the left and select
 the method 'digitPressed:'.
 You have now connected one button.
 Do the same for the other digit buttons (to the same method).
\end_layout

\begin_layout Itemize
Now connect all four operator keys '+', '-', '*' and '/' to the method 'operatio
nPressed:'.
 Here again the event 'Touch Up Inside'.
\end_layout

\begin_layout Itemize
Finally connect the enter key to the method 'enterPressed:'.
\end_layout

\end_deeper
\begin_layout Enumerate
Now you can start the simulator (the play button on the top left of Xcode).
 You should see the calculator popping up.
 When you press on a key, you should see in the console the corresponding
 output.
\end_layout

\begin_layout Enumerate
Foobar
\end_layout

\end_body
\end_document
